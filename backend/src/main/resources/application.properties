#server.port=8081  # or any other port if 8080 is being used by Nginx
#server.servlet.context-path=/app

# TODO : Replace with mysql properties
spring.datasource.url=jdbc:mariadb://192.168.x.x:3306/charity?allowPublicKeyRetrieval=true&useSSL=false&serverRsaPublicKeyFile=/Users/sonalilonkar/Desktop/SJSU/272/Project/CMPE272Project/backend/public_key.pem&passwordCharacterEncoding=UTF-8&allowMultiQueries=true
spring.datasource.username=sonalilonkar
spring.datasource.password=password
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
logging.level.org.hibernate.SQL=INFO
logging.level.org.hibernate.type=INFO

cloud.aws.s3.endpoint=http://localhost:4566
cloud.aws.sns.endpoint=http://localhost:4566

cloudfront.url=http://localhost:8080/mock-cloudfront
cloudfront.id=MOCK_CLOUDFRONT_ID
primary.bucket=mock-bucket
sns.topic.arn=arn:aws:sns:us-east-1:123456789012:mock-sns-topic
aws.accesskeyid=MOCK_AWS_ACCESS_KEY_ID
aws.secretkey=MOCK_AWS_SECRET_KEY
aws.accessKeyId=MOCK_AWS_ACCESS_KEY_ID
aws.secretKey=MOCK_AWS_SECRET_KEY

# PayPal Configuration
paypal.client.id=your-client-id-here
paypal.client.secret=your-client-secret-here
paypal.mode=sandbox  # Change to 'live' for production

#cloudfront.url=${CLOUDFRONT_URL}
#cloudfront.id=${CLOUDFRONT_ID}
#primary.bucket=${PRIMARY_BUCKET}
#sns.topic.arn=${SNS_TOPIC_ARN}
#aws.accesskeyid=${AWS_ACCESS_KEY_ID}
#aws.secretkey=${AWS_SECRET_KEY}
#aws.accessKeyId=${AWS_ACCESS_KEY_ID}
#aws.secretKey=${AWS_SECRET_KEY}

spring.servlet.multipart.max-file-size=50MB




